<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Channel Video Extractor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .loader {
            border-top-color: #3498db;
            -webkit-animation: spin 1s linear infinite;
            animation: spin 1s linear infinite;
        }
        @-webkit-keyframes spin {
            0% { -webkit-transform: rotate(0deg); }
            100% { -webkit-transform: rotate(360deg); }
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex items-center justify-center min-h-screen p-4">
    <div class="w-full max-w-2xl mx-auto bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 md:p-8">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-2xl md:text-3xl font-bold text-gray-800 dark:text-white">YouTube Channel Video Extractor</h1>
            <p class="text-gray-500 dark:text-gray-400 mt-2">Enter a channel ID to get all its video links.</p>
        </div>
        <!-- Input Form -->
        <div class="space-y-4">
            <div>
                <label for="channelId" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">YouTube Channel ID</label>
                <input type="text" id="channelId" class="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="e.g., UC_x5XG1OV2P6uZZ5FSM9Ttw">
            </div>
            <button id="getLinksBtn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105 flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                  <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.022 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                </svg>
                Extract Video Links
            </button>
        </div>
        <!-- Status and Results -->
        <div id="status" class="mt-6 text-center"></div>
        <div id="resultsContainer" class="hidden mt-6">
            <div class="flex justify-between items-center mb-2">
                 <h2 id="resultsHeader" class="text-lg font-semibold text-gray-800 dark:text-white">Extracted Links</h2>
                 <button id="downloadBtn" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-lg transition duration-300 text-sm flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    Download .txt
                 </button>
            </div>
            <textarea id="videoLinks" class="w-full h-64 p-3 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-sm" readonly></textarea>
        </div>
    </div>
    <script>
        // --- IMPORTANT ---
        // Paste the Invoke URL you got from API Gateway here.
        const API_GATEWAY_URL = "${api_gateway_url}";
        
        // DOM Elements
        const getLinksBtn = document.getElementById('getLinksBtn');
        const channelIdInput = document.getElementById('channelId');
        const statusDiv = document.getElementById('status');
        const resultsContainer = document.getElementById('resultsContainer');
        const videoLinksTextarea = document.getElementById('videoLinks');
        const downloadBtn = document.getElementById('downloadBtn');
        const resultsHeader = document.getElementById('resultsHeader');

        // Variable to store the current channel name for the download function
        let currentChannelName = '';

        // Add event listener to the main button
        getLinksBtn.addEventListener('click', fetchAllVideoLinks);

        // Add event listener for the download button
        downloadBtn.addEventListener('click', downloadLinksAsTxt);

        /**
         * Main function to call our secure backend.
         */
        async function fetchAllVideoLinks() {
            const channelId = channelIdInput.value.trim();

            if (API_GATEWAY_URL.includes("YOUR_API_GATEWAY_INVOKE_URL_HERE")) {
                updateStatus('API Gateway URL is not set. Please edit the script.', 'error');
                return;
            }
            if (!channelId) {
                updateStatus('Channel ID is required.', 'error');
                return;
            }

            resetUI();
            updateStatus('<div class="flex items-center justify-center"><div class="loader h-6 w-6 border-4 rounded-full"></div><span class="ml-3">Contacting server... This may take a moment for many videos.</span></div>', 'loading');
            getLinksBtn.disabled = true;
            getLinksBtn.classList.add('opacity-50', 'cursor-not-allowed');

            try {
                // Call YOUR secure backend, not Google's API
                const response = await fetch(API_GATEWAY_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ channelId: channelId }),
                });

                const data = await response.json();

                if (!response.ok) {
                    // If the server returned an error, display it
                    throw new Error(data.error || `Request failed with status $${response.status}`);
                }

                // Destructure safely, not as a template literal
                const channelTitle = data.channelTitle;
                const videoCount = data.videoCount;
                const links = data.links;
                currentChannelName = channelTitle; // Store for download

                resultsHeader.textContent = `Links for $${channelTitle}`;
                videoLinksTextarea.value = links.join('\n');
                resultsContainer.classList.remove('hidden');
                updateStatus(`Successfully found $${videoCount} video links for "$${channelTitle}".`, 'success');

            } catch (error) {
                console.error('An error occurred:', error);
                updateStatus(`Error: $${error.message}`, 'error');
            } finally {
                getLinksBtn.disabled = false;
                getLinksBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        }

        function updateStatus(message, type) {
            statusDiv.innerHTML = message;
            statusDiv.className = 'mt-6 text-center p-3 rounded-lg text-sm ';
            const colorClasses = {
                error: 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200',
                success: 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200',
                loading: 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200',
                info: 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-200'
            };
            statusDiv.classList.add(...(colorClasses[type] || ['bg-transparent']).split(' '));
        }

        function resetUI() {
            statusDiv.innerHTML = '';
            statusDiv.className = 'mt-6 text-center';
            resultsContainer.classList.add('hidden');
            videoLinksTextarea.value = '';
            currentChannelName = '';
            resultsHeader.textContent = 'Extracted Links';
        }

        function downloadLinksAsTxt() {
            const links = videoLinksTextarea.value;
            if (!links) {
                updateStatus('No links to download!', 'info');
                return;
            }
            let safeFilename = currentChannelName ? currentChannelName.replace(/[/\\?%*:|"<>]/g, '_') : 'youtube_video_links';
            const blob = new Blob([links], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `$${safeFilename}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
    </script>
</body>
</html>